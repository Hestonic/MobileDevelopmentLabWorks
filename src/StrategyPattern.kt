/*
Стратегия это поведенческий паттерн,
который используется когда есть несколько объектов
одной и той же природы с разными функциями.
 */

//есть контекст, которые принимают какую-то стратегию
class Context(private val strategy: Strategy) {
    fun useStrategy() = strategy.use() //У контекста есть единственный метод, который вызывает стратегию
}

//Стратегия - это интерфейс, у которой есть метод use

//Я сделал две реализации - Стратегия А и Стратегия В, у который метод работает по разному в зависимости от того
//какой алгоритм нам нужен
interface Strategy {
    fun use()
}

class StrategyA : Strategy {
    override fun use() {
        println("using strategy A")
    }
}

class StrategyB : Strategy {
    override fun use() {
        println("using strategy B")
    }
}

//В методе мейн мы создаём два разных контекста с двумя разными стратегиями
//и вызываем один и тот же метод у стратегии, но работать он будет по разному
//в зависимости от того, какая стратегия была передана во внутрь
//стратегий может быть и больше двух стратегий. Таким образом можно скелить паттерн
//соответственно у каждого интерфейса может быть не один метод, а гораздо больше с паратрами и т.д.
//всё зависит от того что нужно сделать
fun main(){
    val contextA = Context(StrategyA())
    contextA.useStrategy()
    val contextB = Context(StrategyB())
    contextB.useStrategy()
}
